console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å—Ç–∫–æ–π –∏ —É–º–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏...');

const express = require('express');
const puppeteer = require('puppeteer');
const { marked } = require('marked');

const app = express();
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–Ω—ã—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
function intelligentTextWrap(text, maxWidth = 35, preserveGroups = true) {
  if (!text || text.length <= maxWidth) return text;
  
  // –ì—Ä—É–ø–ø—ã —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –≤–º–µ—Å—Ç–µ
  const keepTogether = [
    /\d+\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|—Å–µ–∫—É–Ω–¥|—Å–µ–∫—É–Ω–¥—ã|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—å|–Ω–µ–¥–µ–ª–∏|–º–µ—Å—è—Ü–µ–≤|–º–µ—Å—è—Ü–∞|–ª–µ—Ç|–≥–æ–¥–∞|–≥–æ–¥–æ–≤)/gi,
    /\d+%/g,
    /\d+\/\d+/g,
    /–±–µ–∑\s+–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ/gi,
    /—Ä–æ—Å—Ç–∞\s+—à—Ç–∞—Ç–∞/gi,
    /–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ\s+–±–µ–∑/gi,
    /–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ\s+—Ä–æ—Å—Ç–∞/gi,
    /\w+\s+–ø—Ä–∞–∫—Ç–∏–∫–∏/gi,
    /\w+\s+—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏/gi,
    /\w+\s+–∫–∞—á–µ—Å—Ç–≤–∞/gi,
    /–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\s+\w+/gi,
    /–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ\s+\w+/gi,
    /—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ\s+\w+/gi
  ];
  
  // –ú–∞—Ä–∫–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
  let processedText = text;
  const tokens = [];
  
  keepTogether.forEach((pattern, index) => {
    processedText = processedText.replace(pattern, (match) => {
      const token = `__TOKEN${index}_${tokens.length}__`;
      tokens.push({ token, text: match });
      return token;
    });
  });
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
  const words = processedText.split(/\s+/);
  const lines = [];
  let currentLine = '';
  
  words.forEach(word => {
    const testLine = currentLine ? `${currentLine} ${word}` : word;
    
    if (testLine.length <= maxWidth || currentLine === '') {
      currentLine = testLine;
    } else {
      lines.push(currentLine);
      currentLine = word;
    }
  });
  
  if (currentLine) {
    lines.push(currentLine);
  }
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
  let result = lines.join('\n');
  tokens.forEach(({ token, text }) => {
    result = result.replace(new RegExp(token, 'g'), text);
  });
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–ª–∞–π–¥–æ–≤ —Å —É–º–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
function processSlideText(text, slideType = 'text') {
  if (!text) return '';
  
  const lines = text.split('\n');
  const processedLines = lines.map(line => {
    if (line.trim().startsWith('‚Ä¢')) {
      // –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
      const itemText = line.replace(/^‚Ä¢\s*/, '');
      const wrappedText = intelligentTextWrap(itemText, 32);
      return `<div class="list-item">‚Ä¢ ${parseWithCorrectAccents(wrappedText)}</div>`;
    } else if (line.trim()) {
      // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —É–º–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
      const wrappedText = intelligentTextWrap(line.trim(), 35);
      return `<div class="text-line">${parseWithCorrectAccents(wrappedText)}</div>`;
    } else {
      return '<div class="text-spacer"></div>';
    }
  });
  
  return processedLines.join('');
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
function parseWithCorrectAccents(text) {
  let html = marked(text);
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ <p> —Ç–µ–≥–∏ –∏–∑ marked –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
  html = html.replace(/<\/?p>/g, '');
  
  // –¶–≤–µ—Ç–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –¥–ª—è —á–∏—Å–µ–ª –∏ –≤—Ä–µ–º–µ–Ω–∏
  html = html.replace(/(\d+%|\d+\/\d+|\d+\s*(—á–∞—Å|—á–∞—Å–∞|–º–∏–Ω—É—Ç|—Å–µ–∫—É–Ω–¥|–¥–Ω—è?|–Ω–µ–¥–µ–ª|–º–µ—Å—è—Ü|–≥–æ–¥))/gi, '<span class="accent-blue">$1</span>');
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
  html = html.replace(/(–ø—Ä–∞–∫—Ç–∏–∫–∏|—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏|–∫–∞—á–µ—Å—Ç–≤–∞)/gi, '<span class="accent-blue underline-double">$1</span>');
  
  // –û–±—ã—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
  html = html.replace(/(–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è|–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é|–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å)/gi, '<span class="accent-blue">$1</span>');
  
  return html;
}

function generateSmoothShape(style = 'default') {
  const paths = {
    default: `M 100,25 Q 200,50 300,75 Q 350,100 380,150 Q 350,200 300,275 Q 200,350 100,325 Q 50,250 25,175 Q 50,100 100,25`,
    bright: `M 80,80 Q 180,40 280,80 Q 330,120 360,160 Q 320,220 260,280 Q 180,340 100,320 Q 40,260 60,200 Q 80,140 80,80`,
    elegant: `M 90,60 Q 190,80 290,70 Q 340,110 370,150 Q 330,210 270,270 Q 190,330 110,310 Q 60,260 80,200 Q 100,140 90,60`
  };
  return paths[style] || paths.default;
}

function parseMarkdownToSlides(text) {
  const tokens = marked.lexer(text);
  const slides = [];
  let currentSlide = null;

  tokens.forEach((token, index) => {
    if (token.type === 'heading' && token.depth === 1) {
      const nextToken = tokens[index + 1];
      const subtitle = (nextToken && nextToken.type === 'paragraph') ? nextToken.text : '';
      
      slides.push({
        type: 'intro',
        title: token.text,
        text: subtitle,
        color: 'accent',
        showAbstraction: true
      });
    } 
    else if (token.type === 'heading' && token.depth === 2) {
      currentSlide = {
        type: 'text',
        title: token.text,
        text: '',
        color: 'default',
        content: []
      };
      slides.push(currentSlide);
    } 
    else if (token.type === 'blockquote') {
      const quoteText = token.tokens?.[0]?.text || '';
      const textLength = quoteText.length;
      
      let size = 'large';
      if (textLength > 140) size = 'small';
      else if (textLength > 100) size = 'medium';
      
      slides.push({
        type: 'quote',
        text: quoteText,
        color: 'accent',
        showAbstraction: true,
        size
      });
    } 
    else if (currentSlide && (token.type === 'paragraph' || token.type === 'list')) {
      if (token.type === 'paragraph') {
        currentSlide.content.push({
          type: 'paragraph',
          text: token.text
        });
      } else if (token.type === 'list') {
        currentSlide.content.push({
          type: 'list',
          items: token.items.map(item => item.text),
          ordered: token.ordered
        });
      }
    }
  });

  // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  slides.forEach(slide => {
    if (slide.content) {
      const paragraphs = slide.content.filter(c => c.type === 'paragraph').map(c => c.text);
      const lists = slide.content.filter(c => c.type === 'list');
      
      let fullText = '';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
      if (paragraphs.length > 0) {
        fullText += paragraphs.join('\n\n');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
      if (lists.length > 0) {
        if (fullText) fullText += '\n\n';
        lists.forEach(list => {
          fullText += list.items.map(item => `‚Ä¢ ${item}`).join('\n');
        });
      }
      
      slide.text = fullText;
      delete slide.content;
    }
  });

  return slides;
}

function createCorrectedHTML(slide, slideNumber, totalSlides, settings) {
  const {
    style = 'default',
    brandColor = '#6366F1',
    authorUsername = '@username',
    authorFullName = '–¢–≤–æ—ë –∏–º—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å'
  } = settings;
  
  const colors = slide.color === 'accent' 
    ? { bg: brandColor, text: '#ffffff' }
    : { bg: '#ffffff', text: '#000000' };
  
  const shapePath = generateSmoothShape(style);
  const showShape = (slide.type === 'intro' || slide.type === 'quote') && slide.showAbstraction;
  
  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  let titleSize, textSize;
  
  if (slide.type === 'text') {
    if (slide.text && slide.text.trim()) {
      titleSize = '24px';
      textSize = '14px';
    } else {
      titleSize = '34px';
      textSize = '16px';
    }
  }
  
  let content = '';
  switch (slide.type) {
    case 'intro':
      content = `
        ${slide.title ? `<h1>${slide.title}</h1>` : ''}
        ${slide.text ? `<p class="intro-subtitle">${slide.text}</p>` : ''}
      `;
      break;
    case 'text':
      const processedTitle = slide.title ? intelligentTextWrap(parseWithCorrectAccents(slide.title), 40) : '';
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å —É–º–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
      let processedText = '';
      if (slide.text) {
        processedText = processSlideText(slide.text, 'text');
      }
      
      content = `
        ${slide.title ? `<h2 style="font-size: ${titleSize}; margin-bottom: ${slide.text ? '16px' : '0'};">${processedTitle}</h2>` : ''}
        ${slide.text ? `<div class="text-content" style="font-size: ${textSize};">${processedText}</div>` : ''}
      `;
      break;
    case 'quote':
      const quoteClass = slide.size ? `quote--${slide.size}` : 'quote--large';
      content = `<div class="quote-content ${quoteClass}">${parseWithCorrectAccents(slide.text || '')}</div>`;
      break;
  }

  return `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            box-sizing: border-box;
            -webkit-font-smoothing: antialiased;
            margin: 0;
            padding: 0;
        }

        html, body {
            width: 400px;
            height: 500px;
            overflow: hidden;
        }

        .slide-wrapper {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 24px;
            font-family: 'Inter', sans-serif;
            overflow: hidden;
            height: 500px;
            width: 400px;
            position: relative;
            background: ${colors.bg};
            color: ${colors.text};
            border-radius: 16px;
        }

        .smooth-shape {
            position: absolute;
            top: 0;
            right: 0;
            width: 100%;
            height: 100%;
            opacity: 0.08;
            z-index: 1;
            overflow: hidden;
            border-radius: 16px;
        }

        .smooth-shape svg {
            width: 110%;
            height: 110%;
            transform: translate(20px, -20px);
        }

        .smooth-shape path {
            fill: none;
            stroke: ${colors.text};
            stroke-width: 2;
            opacity: 0.4;
        }

        .slide-content {
            position: relative;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
            z-index: 10;
        }

        .slide-header, .slide-footer {
            font-size: 10px;
            font-weight: 400;
            display: flex;
            justify-content: space-between;
            align-items: center;
            height: 16px;
            z-index: 10;
            opacity: 0.7;
        }

        /* –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è intro */
        .slide-content.intro h1 {
            font-size: 32px;
            font-weight: 700;
            line-height: 1.1;
            margin-bottom: 16px;
            letter-spacing: -0.02em;
        }

        .slide-content.intro .intro-subtitle {
            font-size: 16px;
            font-weight: 300;
            line-height: 1.4;
            opacity: 0.9;
        }

        /* –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–ª–∞–π–¥–æ–≤ */
        .slide-content.text h2 {
            font-weight: 600;
            line-height: 1.2;
            letter-spacing: -0.01em;
            white-space: pre-line;
            word-wrap: break-word;
            hyphens: manual;
            overflow-wrap: break-word;
            word-break: keep-all;
        }

        .slide-content.text .text-content {
            font-weight: 400;
            line-height: 1.5;
            word-spacing: 0.05em;
        }

        /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ —Å–ø–∏—Å–∫–æ–≤ —Å —É–º–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ */
        .text-line {
            margin-bottom: 8px;
            white-space: pre-line;
            word-wrap: break-word;
            hyphens: manual;
            overflow-wrap: break-word;
            word-break: keep-all;
        }

        .text-spacer {
            height: 8px;
        }

        .list-item {
            margin-bottom: 6px;
            line-height: 1.4;
            white-space: pre-line;
            word-wrap: break-word;
            hyphens: manual;
            overflow-wrap: break-word;
            word-break: keep-all;
        }

        /* –¶–∏—Ç–∞—Ç—ã */
        .slide-content.quote {
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .quote--large {
            font-size: 24px;
            line-height: 1.2;
            font-weight: 600;
            letter-spacing: -0.01em;
        }

        .quote--medium {
            font-size: 20px;
            line-height: 1.3;
            font-weight: 500;
        }

        .quote--small {
            font-size: 16px;
            line-height: 1.4;
            font-weight: 400;
        }

        /* –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã —Å –∑–∞–ø—Ä–µ—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ */
        .accent-blue {
            color: ${colors.bg === '#ffffff' ? brandColor : '#87CEEB'};
            font-weight: 600;
            white-space: nowrap;
        }

        /* –î–≤–æ–π–Ω–æ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ */
        .underline-double {
            position: relative;
            text-decoration: none;
            white-space: nowrap;
        }

        .underline-double:after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            right: 0;
            height: 2px;
            background: ${colors.bg === '#ffffff' ? brandColor : '#87CEEB'};
        }

        .underline-double:before {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            right: 0;
            height: 1px;
            background: ${colors.bg === '#ffffff' ? brandColor : '#87CEEB'};
        }

        .arrow {
            font-size: 12px;
            font-weight: 300;
        }
    </style>
</head>
<body>
    <div class="slide-wrapper">
        ${showShape ? `
        <div class="smooth-shape">
            <svg viewBox="0 0 400 500">
                <path d="${shapePath}" />
            </svg>
        </div>` : ''}

        <div class="slide-header">
            <span>${authorUsername}</span>
            <span>${slideNumber}/${totalSlides}</span>
        </div>

        <div class="slide-content ${slide.type}">
            ${content}
        </div>

        <div class="slide-footer">
            <span>${authorFullName}</span>
            <span class="arrow">${slideNumber < totalSlides ? '‚Üí' : ''}</span>
        </div>
    </div>
</body>
</html>`;
}

app.get('/health', (req, res) => {
  res.json({ 
    status: 'corrected', 
    fixes: ['typography', 'double-underline', 'layout', 'spacing', 'intelligent-text-wrapping']
  });
});

app.post('/api/generate-carousel', async (req, res) => {
  console.log('üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—É—Å–µ–ª—å —Å —É–º–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏...');
  
  try {
    const { text, settings = {} } = req.body;
    
    if (!text) {
      return res.status(400).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç' });
    }

    const slides = parseMarkdownToSlides(text);
    
    if (slides.length === 0) {
      slides.push({
        type: 'text',
        title: '–í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç',
        text: text.substring(0, 200),
        color: 'default'
      });
    }

    console.log(`üìù –°–æ–∑–¥–∞–Ω–æ —Å–ª–∞–π–¥–æ–≤: ${slides.length}`);

    const browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    const images = [];

    for (let i = 0; i < slides.length; i++) {
      console.log(`üñºÔ∏è –†–µ–Ω–¥–µ—Ä–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ª–∞–π–¥ ${i + 1}/${slides.length}`);
      
      const html = createCorrectedHTML(slides[i], i + 1, slides.length, settings);
      
      const page = await browser.newPage();
      await page.setViewport({ 
        width: 400, 
        height: 500,
        deviceScaleFactor: 4
      });
      
      await page.setContent(html, { waitUntil: 'networkidle0' });
      await page.evaluate(() => document.fonts.ready);
      await page.waitForTimeout(500);
      
      const screenshot = await page.screenshot({
        type: 'png',
        encoding: 'base64',
        fullPage: false
      });
      
      images.push(screenshot);
      await page.close();
    }

    await browser.close();
    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—É—Å–µ–ª—å —Å —É–º–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ –≥–æ—Ç–æ–≤–∞!');

    res.json({
      slides,
      images,
      metadata: {
        totalSlides: slides.length,
        generatedAt: new Date().toISOString(),
        settings,
        fixes: ['corrected-typography', 'double-underline', 'proper-spacing', 'intelligent-text-wrapping']
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

const PORT = 3001;
app.listen(PORT, () => {
  console.log(`üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:${PORT}`);
  console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–µ—Ä—Å—Ç–∫–∞, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –æ—Ç—Å—Ç—É–ø—ã, —É–º–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã`);
});