console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');

const express = require('express');
const puppeteer = require('puppeteer');

const app = express();
app.use(express.json());

app.get('/health', (req, res) => {
  res.json({ status: 'ok', features: ['image-generation'] });
});

app.post('/api/generate-carousel', async (req, res) => {
  console.log('üé® –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  
  try {
    const { text = '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç' } = req.body;
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Å–ª–∞–π–¥–∞
    function createSlideHTML(content, slideNum, total, bgColor = '#ffffff', textColor = '#000000') {
      return `<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            width: 1080px;
            height: 1080px;
            background: ${bgColor};
            color: ${textColor};
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 60px;
        }
        .header { 
            display: flex; 
            justify-content: space-between; 
            align-items: center;
            font-size: 14px;
            opacity: 0.8;
        }
        .content { 
            flex-grow: 1; 
            display: flex; 
            align-items: center; 
            justify-content: center;
            text-align: center;
        }
        .footer { 
            display: flex; 
            justify-content: space-between; 
            align-items: center;
            font-size: 14px;
            opacity: 0.8;
        }
        h1 { 
            font-size: 56px; 
            font-weight: 700;
            line-height: 1.1;
            margin-bottom: 20px;
        }
        .quote { 
            font-size: 36px; 
            font-weight: 500;
            line-height: 1.3;
            font-style: italic;
            max-width: 800px;
        }
        .text-content {
            font-size: 28px;
            line-height: 1.4;
            max-width: 900px;
        }
    </style>
</head>
<body>
    <div class="header">
        <span>@carousel_api</span>
        <span>${slideNum}/${total}</span>
    </div>
    <div class="content">
        ${content}
    </div>
    <div class="footer">
        <span>Carousel API Demo</span>
        <span>${slideNum < total ? '‚Üí' : 'üéâ'}</span>
    </div>
</body>
</html>`;
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–ª–∞–π–¥–æ–≤
    const slides = [
      {
        html: createSlideHTML('<h1>üé† Carousel API</h1><div class="text-content">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ —Ç–µ–∫—Å—Ç–∞</div>', 1, 3),
        type: 'intro'
      },
      {
        html: createSlideHTML(`<div class="text-content">üìù –í–∞—à —Ç–µ–∫—Å—Ç:<br/><br/><strong>"${text.substring(0, 100)}${text.length > 100 ? '...' : ''}"</strong></div>`, 2, 3),
        type: 'text'
      },
      {
        html: createSlideHTML('<div class="quote">"–ö–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–µ–π"</div>', 3, 3, '#2F00FF', '#ffffff'),
        type: 'quote'
      }
    ];

    console.log('üì∏ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
    const browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-web-security'
      ]
    });

    const images = [];

    for (let i = 0; i < slides.length; i++) {
      console.log(`üñºÔ∏è –†–µ–Ω–¥–µ—Ä–∏–º —Å–ª–∞–π–¥ ${i + 1}/${slides.length}...`);
      
      const page = await browser.newPage();
      await page.setViewport({ 
        width: 1080, 
        height: 1080,
        deviceScaleFactor: 2 // –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
      });
      
      await page.setContent(slides[i].html, { 
        waitUntil: 'domcontentloaded'
      });
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      await page.waitForTimeout(500);
      
      const screenshot = await page.screenshot({
        type: 'png',
        encoding: 'base64',
        fullPage: false
      });
      
      images.push(screenshot);
      await page.close();
      
      console.log(`‚úÖ –°–ª–∞–π–¥ ${i + 1} –≥–æ—Ç–æ–≤ (${Math.round(Buffer.from(screenshot, 'base64').length / 1024)}KB)`);
    }

    await browser.close();
    console.log('üéâ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!');

    res.json({
      slides: slides.map((slide, i) => ({
        type: slide.type,
        slideNumber: i + 1,
        size: `${Math.round(Buffer.from(images[i], 'base64').length / 1024)}KB`
      })),
      images,
      metadata: {
        totalSlides: slides.length,
        generatedAt: new Date().toISOString(),
        inputText: text.substring(0, 50) + '...'
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      details: error.message
    });
  }
});

const PORT = 3001;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  console.log(`üé® –ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫!`);
});
