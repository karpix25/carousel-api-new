console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–î–ê–ö–®–ù –í–ï–†–°–ò–Ø - Canvas API');

const express = require('express');
const { marked } = require('marked');
const { createCanvas } = require('canvas');

const app = express();
app.use(express.json({ limit: '10mb' }));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  CANVAS: {
    WIDTH: 1600,
    HEIGHT: 2000,
    PADDING: 96,
    BORDER_RADIUS: 64
  },
  FONTS: {
    TITLE_INTRO: 'bold 128px "DejaVu Sans", "Liberation Sans", "Noto Color Emoji", Arial, sans-serif',
    SUBTITLE_INTRO: '64px "DejaVu Sans", "Liberation Sans", "Noto Color Emoji", Arial, sans-serif',
    TITLE_TEXT_WITH_CONTENT: 'bold 96px "DejaVu Sans", "Liberation Sans", "Noto Color Emoji", Arial, sans-serif',
    TITLE_TEXT_ONLY: 'bold 136px "DejaVu Sans", "Liberation Sans", "Noto Color Emoji", Arial, sans-serif',
    TEXT: '56px "DejaVu Sans", "Liberation Sans", "Noto Color Emoji", Arial, sans-serif',
    QUOTE_LARGE: 'bold 96px "DejaVu Sans", "Liberation Sans", "Noto Color Emoji", Arial, sans-serif',
    QUOTE_SMALL: 'bold 64px "DejaVu Sans", "Liberation Sans", "Noto Color Emoji", Arial, sans-serif',
    HEADER_FOOTER: '40px "DejaVu Sans", "Liberation Sans", "Noto Color Emoji", Arial, sans-serif'
  },
  COLORS: {
    DEFAULT_BG: '#ffffff',
    DEFAULT_TEXT: '#000000',
    ACCENT_FALLBACK: '#6366F1'
  }
};

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å –≤–∏—Å—è—á–∏–º–∏ –ø—Ä–µ–¥–ª–æ–≥–∞–º–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
function wrapText(ctx, text, maxWidth) {
  if (!text) return [];
  
  // –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
  text = text.trim().replace(/\s+/g, ' ');
  
  const words = text.split(' ');
  const lines = [];
  let currentLine = words[0] || '';

  // –í–∏—Å—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–≥–∏
  const hangingWords = [
    '–∏', '–∞', '–Ω–æ', '–¥–∞', '–∏–ª–∏', '–ª–∏–±–æ', '—Ç–æ', '–Ω–µ', '–Ω–∏', 
    '–∑–∞', '–¥–ª—è', '–±–µ–∑', '–ø—Ä–∏', '–ø—Ä–æ', '–ø–æ–¥', '–Ω–∞–¥', '—á–µ—Ä–µ–∑', '–º–µ–∂–¥—É', 
    '–∏–∑', '–æ—Ç', '–¥–æ', '–Ω–∞', '–≤', '—Å', '—É', '–æ', '–æ–±', '–≤–æ', '—Å–æ', '–∫–æ',
    '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–µ—Å–ª–∏', '—á—Ç–æ–±—ã', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–æ—Ç–æ—Ä–∞—è'
  ];

  for (let i = 1; i < words.length; i++) {
    const word = words[i];
    const testLine = currentLine + ' ' + word;
    const width = ctx.measureText(testLine).width;
    
    if (width < maxWidth) {
      currentLine = testLine;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Å—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–≥–∏ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
      const nextWord = words[i + 1];
      if (nextWord && hangingWords.includes(word.toLowerCase())) {
        const testWithNext = currentLine + ' ' + nextWord;
        const widthWithNext = ctx.measureText(testWithNext).width;
        
        if (widthWithNext < maxWidth) {
          currentLine = testWithNext;
          i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
        }
      }
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –Ω–∞ –≤–∏—Å—è—á–∏–π –ø—Ä–µ–¥–ª–æ–≥
      const lastWord = currentLine.split(' ').pop();
      if (lastWord && hangingWords.includes(lastWord.toLowerCase())) {
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∏—Å—è—á–∏–π –ø—Ä–µ–¥–ª–æ–≥
        const wordsInLine = currentLine.split(' ');
        const withoutLastWord = wordsInLine.slice(0, -1).join(' ');
        
        if (withoutLastWord) {
          lines.push(withoutLastWord);
          currentLine = lastWord + ' ' + word;
        } else {
          lines.push(currentLine);
          currentLine = word;
        }
      } else {
        lines.push(currentLine);
        currentLine = word;
      }
    }
  }
  
  if (currentLine) {
    lines.push(currentLine);
  }
  
  return lines;
}

function parseMarkdownToSlides(text) {
  const tokens = marked.lexer(text);
  const slides = [];
  let currentSlide = null;

  tokens.forEach((token, index) => {
    if (token.type === 'heading' && token.depth === 1) {
      const nextToken = tokens[index + 1];
      const subtitle = (nextToken && nextToken.type === 'paragraph') ? nextToken.text : '';
      
      slides.push({
        type: 'intro',
        title: token.text,
        text: subtitle,
        color: 'accent'
      });
    } 
    else if (token.type === 'heading' && token.depth === 2) {
      currentSlide = {
        type: 'text',
        title: token.text,
        text: '',
        color: 'default',
        content: []
      };
      slides.push(currentSlide);
    } 
    else if (token.type === 'blockquote') {
      const quoteText = token.tokens?.[0]?.text || '';
      slides.push({
        type: 'quote',
        text: quoteText,
        color: 'accent',
        size: quoteText.length > 100 ? 'small' : 'large'
      });
    } 
    else if (currentSlide && (token.type === 'paragraph' || token.type === 'list')) {
      if (token.type === 'paragraph') {
        currentSlide.content.push({ type: 'paragraph', text: token.text });
      } else if (token.type === 'list') {
        currentSlide.content.push({
          type: 'list',
          items: token.items.map(item => item.text)
        });
      }
    }
  });

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  slides.forEach(slide => {
    if (slide.content) {
      const paragraphs = slide.content.filter(c => c.type === 'paragraph').map(c => c.text);
      const lists = slide.content.filter(c => c.type === 'list');
      
      let fullText = '';
      if (paragraphs.length > 0) {
        fullText += paragraphs.join('\n\n');
      }
      if (lists.length > 0) {
        if (fullText) fullText += '\n\n';
        lists.forEach(list => {
          fullText += list.items.map(item => `‚Ä¢ ${item}`).join('\n');
        });
      }
      
      slide.text = fullText;
      delete slide.content;
    }
  });

  return slides;
}

function renderSlideToCanvas(slide, slideNumber, totalSlides, settings) {
  const {
    brandColor = CONFIG.COLORS.ACCENT_FALLBACK,
    authorUsername = '@username',
    authorFullName = 'Your Name'
  } = settings;

  const canvas = createCanvas(CONFIG.CANVAS.WIDTH, CONFIG.CANVAS.HEIGHT);
  const ctx = canvas.getContext('2d');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç–º–æ–¥–∑–∏
  ctx.textRenderingOptimization = 'optimizeQuality';
  ctx.imageSmoothingEnabled = true;
  ctx.imageSmoothingQuality = 'high';
  
  // –¶–≤–µ—Ç–∞
  const isAccent = slide.color === 'accent';
  const bgColor = isAccent ? brandColor : CONFIG.COLORS.DEFAULT_BG;
  const textColor = isAccent ? CONFIG.COLORS.DEFAULT_BG : CONFIG.COLORS.DEFAULT_TEXT;
  
  // –§–æ–Ω —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
  ctx.fillStyle = bgColor;
  ctx.beginPath();
  ctx.roundRect(0, 0, CONFIG.CANVAS.WIDTH, CONFIG.CANVAS.HEIGHT, CONFIG.CANVAS.BORDER_RADIUS);
  ctx.fill();
  
  ctx.fillStyle = textColor;
  
  // Header
  ctx.font = CONFIG.FONTS.HEADER_FOOTER;
  ctx.globalAlpha = 0.7;
  ctx.textAlign = 'left';
  ctx.fillText(authorUsername, CONFIG.CANVAS.PADDING, CONFIG.CANVAS.PADDING + 40);
  ctx.textAlign = 'right';
  ctx.fillText(`${slideNumber}/${totalSlides}`, CONFIG.CANVAS.WIDTH - CONFIG.CANVAS.PADDING, CONFIG.CANVAS.PADDING + 40);
  ctx.globalAlpha = 1;

  // Content area
  const contentY = 300;
  const contentHeight = 1400;
  const contentWidth = CONFIG.CANVAS.WIDTH - (CONFIG.CANVAS.PADDING * 2);
  
  if (slide.type === 'intro') {
    renderIntroSlide(ctx, slide, contentY, contentHeight, contentWidth);
  } else if (slide.type === 'text') {
    renderTextSlide(ctx, slide, contentY, contentWidth);
  } else if (slide.type === 'quote') {
    renderQuoteSlide(ctx, slide, contentY, contentHeight, contentWidth);
  }

  // Footer
  ctx.font = CONFIG.FONTS.HEADER_FOOTER;
  ctx.globalAlpha = 0.7;
  ctx.textAlign = 'left';
  ctx.fillText(authorFullName, CONFIG.CANVAS.PADDING, CONFIG.CANVAS.HEIGHT - CONFIG.CANVAS.PADDING);
  ctx.textAlign = 'right';
  if (slideNumber < totalSlides) {
    ctx.fillText('‚Üí', CONFIG.CANVAS.WIDTH - CONFIG.CANVAS.PADDING, CONFIG.CANVAS.HEIGHT - CONFIG.CANVAS.PADDING);
  }
  ctx.globalAlpha = 1;

  return canvas;
}

function renderIntroSlide(ctx, slide, contentY, contentHeight, contentWidth) {
  ctx.textAlign = 'center';
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  ctx.font = CONFIG.FONTS.TITLE_INTRO;
  const titleLines = wrapText(ctx, slide.title || '', contentWidth);
  let y = contentY + (contentHeight - titleLines.length * 140 - (slide.text ? 120 : 0)) / 2;
  
  titleLines.forEach(line => {
    ctx.fillText(line, CONFIG.CANVAS.WIDTH / 2, y);
    y += 140;
  });

  // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
  if (slide.text) {
    ctx.font = CONFIG.FONTS.SUBTITLE_INTRO;
    ctx.globalAlpha = 0.9;
    y += 64;
    const subtitleLines = wrapText(ctx, slide.text, contentWidth);
    subtitleLines.forEach(line => {
      ctx.fillText(line, CONFIG.CANVAS.WIDTH / 2, y);
      y += 80;
    });
    ctx.globalAlpha = 1;
  }
}

function renderTextSlide(ctx, slide, contentY, contentWidth) {
  let y = contentY;
  
  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  if (slide.title) {
    const hasText = slide.text && slide.text.trim();
    ctx.font = hasText ? CONFIG.FONTS.TITLE_TEXT_WITH_CONTENT : CONFIG.FONTS.TITLE_TEXT_ONLY;
    ctx.textAlign = 'left';
    
    const titleLines = wrapText(ctx, slide.title, contentWidth);
    titleLines.forEach(line => {
      ctx.fillText(line, CONFIG.CANVAS.PADDING, y);
      y += hasText ? 120 : 160;
    });
    
    if (hasText) y += 64;
  }

  // –¢–µ–∫—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ø–∏—Å–∫–æ–≤
  if (slide.text) {
    ctx.font = CONFIG.FONTS.TEXT;
    ctx.textAlign = 'left';
    
    const textLines = slide.text.split('\n');
    textLines.forEach(line => {
      if (line.trim().startsWith('‚Ä¢')) {
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
        const itemText = line.replace(/^‚Ä¢\s*/, '');
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –±—É–ª–ª–µ—Ç
        const bulletX = CONFIG.CANVAS.PADDING;
        ctx.fillText('‚Ä¢', bulletX, y);
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        const bulletWidth = ctx.measureText('‚Ä¢ ').width;
        const textX = bulletX + bulletWidth;
        const availableWidth = contentWidth - bulletWidth;
        
        // –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–π —à–∏—Ä–∏–Ω—ã
        const wrappedLines = wrapText(ctx, itemText, availableWidth);
        
        wrappedLines.forEach((wrappedLine, index) => {
          ctx.fillText(wrappedLine, textX, y + (index * 72));
        });
        
        y += wrappedLines.length * 72;
        
      } else if (line.trim()) {
        const wrappedLines = wrapText(ctx, line.trim(), contentWidth);
        wrappedLines.forEach(wrappedLine => {
          ctx.fillText(wrappedLine, CONFIG.CANVAS.PADDING, y);
          y += 72;
        });
      } else {
        y += 32;
      }
    });
  }
}

function renderQuoteSlide(ctx, slide, contentY, contentHeight, contentWidth) {
  ctx.textAlign = 'center';
  
  const isSmall = slide.size === 'small';
  ctx.font = isSmall ? CONFIG.FONTS.QUOTE_SMALL : CONFIG.FONTS.QUOTE_LARGE;
  
  const quoteLines = wrapText(ctx, slide.text || '', contentWidth);
  const lineHeight = isSmall ? 84 : 120;
  let y = contentY + (contentHeight - quoteLines.length * lineHeight) / 2;
  
  quoteLines.forEach(line => {
    ctx.fillText(line, CONFIG.CANVAS.WIDTH / 2, y);
    y += lineHeight;
  });
}

// API Routes
app.get('/health', (req, res) => {
  res.json({ 
    status: 'production-ready',
    engine: 'canvas-api-perfect',
    performance: 'optimized',
    memory: 'efficient',
    features: ['emoji-support', 'smart-wrapping', 'hanging-prevention']
  });
});

app.post('/api/generate-carousel', async (req, res) => {
  const startTime = Date.now();
  console.log('üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Canvas API —Å —É–º–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏...');
  
  try {
    const { text, settings = {} } = req.body;
    
    if (!text) {
      return res.status(400).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    const hasEmoji = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/u.test(text);
    console.log(`üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —ç–º–æ–¥–∑–∏: ${hasEmoji ? '–¥–∞' : '–Ω–µ—Ç'}`);

    // –ü–∞—Ä—Å–∏–Ω–≥
    const slides = parseMarkdownToSlides(text);
    
    if (slides.length === 0) {
      slides.push({
        type: 'text',
        title: '–í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç',
        text: text.substring(0, 200),
        color: 'default'
      });
    }

    console.log(`üìù –°–æ–∑–¥–∞–Ω–æ —Å–ª–∞–π–¥–æ–≤: ${slides.length}`);

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
    const images = [];
    for (let i = 0; i < slides.length; i++) {
      try {
        const canvas = renderSlideToCanvas(slides[i], i + 1, slides.length, settings);
        const base64 = canvas.toBuffer('image/png').toString('base64');
        images.push(base64);
        console.log(`‚úÖ –°–ª–∞–π–¥ ${i + 1} –≥–æ—Ç–æ–≤`);
      } catch (slideError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ —Å–ª–∞–π–¥–∞ ${i + 1}:`, slideError.message);
        // Fallback —Å–ª–∞–π–¥
        const fallbackCanvas = createCanvas(CONFIG.CANVAS.WIDTH, CONFIG.CANVAS.HEIGHT);
        const fallbackCtx = fallbackCanvas.getContext('2d');
        fallbackCtx.fillStyle = '#ffffff';
        fallbackCtx.fillRect(0, 0, CONFIG.CANVAS.WIDTH, CONFIG.CANVAS.HEIGHT);
        fallbackCtx.fillStyle = '#000000';
        fallbackCtx.font = '48px Arial';
        fallbackCtx.textAlign = 'center';
        fallbackCtx.fillText('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞', CONFIG.CANVAS.WIDTH / 2, CONFIG.CANVAS.HEIGHT / 2);
        const fallbackBase64 = fallbackCanvas.toBuffer('image/png').toString('base64');
        images.push(fallbackBase64);
      }
    }

    const processingTime = Date.now() - startTime;
    console.log(`üöÄ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${processingTime}ms`);

    res.json({
      slides,
      images,
      metadata: {
        totalSlides: slides.length,
        generatedAt: new Date().toISOString(),
        processingTime,
        settings,
        engine: 'canvas-api-perfect',
        features: {
          emojiSupport: true,
          smartWrapping: true,
          hangingPrevention: true,
          hasEmoji
        }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    res.status(500).json({ 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–æ–¥–∑–∏
app.post('/api/test-emoji', async (req, res) => {
  try {
    const testText = "üöÄ –¢–µ—Å—Ç —ç–º–æ–¥–∑–∏: üéØ üí™ ‚ú® üì± üî• üí° üé® ‚ö°";
    
    const canvas = createCanvas(800, 200);
    const ctx = canvas.getContext('2d');
    
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, 800, 200);
    
    ctx.fillStyle = '#000000';
    ctx.font = '48px "DejaVu Sans", "Liberation Sans", "Noto Color Emoji", Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText(testText, 400, 100);
    
    const base64 = canvas.toBuffer('image/png').toString('base64');
    
    res.json({
      success: true,
      testText,
      image: base64,
      message: '–≠–º–æ–¥–∑–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'
    });
    
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë Graceful shutdown');
  process.exit(0);
});

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`üöÄ PRODUCTION Canvas API —Å —É–º–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`‚ö° –ì–æ—Ç–æ–≤ –∫ –≤—ã—Å–æ–∫–∏–º –Ω–∞–≥—Ä—É–∑–∫–∞–º`);
  console.log(`üéØ –§–∏—á–∏: —ç–º–æ–¥–∑–∏, —É–º–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤–∏—Å—è—á–∏—Ö –ø—Ä–µ–¥–ª–æ–≥–æ–≤`);
});
